This is a distributed bus version based on axon-trade project.
This is a sample application to demonstrate the possibilities of the Axon framework in a high load environment. We have chosen to create a Trader application. All you need to run it is java, mongodb and maven.

Initial setup
-------------
- Make sure you have java installed
http://www.java.com/download/

- Make sure you have maven installed
http://maven.apache.org/download.html#Installation

- Make sure you have mongodb installed
http://www.mongodb.org/display/DOCS/Quickstart

- Make sure you hava RabbitMQ installed
https://www.rabbitmq.com/download.html

- Make sure you have JGroups installed
http://jgroups.org/

When using mongodb in a test environment, it is easiest to just start one instance with the default port on your local machine. If you want another setup, you can find more information in the advanced configuration section.

Running the sample
------------------
- First you need to download the source code, if you are reading this file on your local machine you already have downloaded the source code. If you are on the main page of the Github project, you can easily find a url to clone the repository or to download a zip with all the sources.

* Maven
- Make sure you have your mongo instance running
- Make sure you have your RabbitMQ instance running
- Make sure you have your GossipRouter running
>>in this example,mq and router are running at 10.1.79.25:5672 and 10.1.79.25:12001 respectively
- Step into the main folder of the project
> mvn clean install
> cd web-ui
> mvn jetty:run-war
- Browse to http://localhost:8080 and you should see the user accounts that you can use to login.
(You can always refresh the data by calling /data/init on the application)

Vertx
------------------
We have created a client-server example that enables you to track all trades being made. The server is implemented using
vertx. Events are send using http to the vertx instance. From the web application you can connect to the vertx server.

If you want to use this functionality you also need to start a vertx server.
Go to the vertx-ui/trader folder and start with
# vertx run TradeWatcher.groovy

This runs a service on port 9090 which is configured in the spring application as well.

More documentation
----------------------
We are documenting the sample on the wiki of the github project.
https://github.com/AxonFramework/Axon-trader/wiki